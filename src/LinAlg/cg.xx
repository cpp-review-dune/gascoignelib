#include "cg.h"

/********************************************************************/

namespace Gascoigne
{
template <class S, class V>
void CG<S,V>::solve(V& x, const V& b, CGInfo& info)
{
  V g("g"),h("h"),d("d"),Ad("Ad");

  solver.RegisterVector(g);
  solver.ReInitVector  (g);
  solver.RegisterVector(h);
  solver.ReInitVector  (h);
  solver.RegisterVector(d);
  solver.ReInitVector  (d);
  solver.RegisterVector(Ad);
  solver.ReInitVector  (Ad);

  solver.Equ(g,1.,b);	
  solver.cgvmult(g,x,-1.);

  double res = solver.Norm(g);

  if (res==0.) return;

  solver.precondition(d,g);

  double gh  = solver.ScalarProduct(g,d);

  solver.Equ(d,-1.,d);

  int reached = 0;

  for (int it=0; !reached; it++)
    {
      solver.Zero(Ad);	
      solver.cgvmult(Ad,d,1.);

      double alpha = gh / solver.ScalarProduct(d,Ad);

      solver.Add(g,alpha,Ad);
      solver.Add(x,-alpha,d);
      res = solver.Norm(g);

      reached = info.check(res);

      if (reached) break;
    
      solver.precondition(h,g);
      
      double ghold = gh;
      gh   = solver.ScalarProduct(g,h);
      double beta = gh/ghold;
      
      //solver.GVsadd(beta,d,-1.,h);
      solver.Equ(d,beta,d);
      solver.Add(d,-1.,h);
    }
  solver.DeleteVector(g);
  solver.DeleteVector(h);
  solver.DeleteVector(d);
  solver.DeleteVector(Ad);
}
}


