/**
 *
 * Copyright (C) 2004, 2005, 2006, 2009, 2011 by the Gascoigne 3D authors
 *
 * This file is part of Gascoigne 3D
 *
 * Gascoigne 3D is free software: you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later
 * version.
 *
 * Gascoigne 3D is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * Please refer to the file LICENSE.TXT for further information
 * on this license.
 *
 **/

#include "fmatrixblock.h"
#include "simplematrix.h"
#include "sparseblockmatrix.h"
#include <fstream>

//#include  "omp.h"
/*-------------------------------------------------------------*/

namespace Gascoigne {
template<class B>
SparseBlockMatrix<B>::SparseBlockMatrix()
  : MatrixInterface()
{}

/*-------------------------------------------------------------*/

template<class B>
SparseBlockMatrix<B>::SparseBlockMatrix(const SparseBlockMatrix<B>& A)
  : MatrixInterface()
{}

/*-------------------------------------------------------------*/

template<class B>
void
SparseBlockMatrix<B>::Jacobi(GlobalVector& x) const
{
  for (IndexType i = 0; i < n(); i++) {
    B Ad = *mat(US.diag(i));
    Ad.inverse();
    Ad.vmult(x.start(i));
  }
}

/*-------------------------------------------------------------*/

template<class B>
void
SparseBlockMatrix<B>::FillInterfaceList(const nvector<IndexType>& elements,
                                        nvector<IndexType>& start,
                                        nvector<MatrixEntryType>& values) const
{
  assert(elements.size() % 2 == 0);
  IndexType ne = elements.size() / 2;
  start.resize(ne + 1);
  IndexType index = 0;
  start[index] = 0;
  nvector<MatrixEntryType> tmp;
  IndexType cur_row;
  IndexType row;
  IndexType pos;
  IndexType col;
  for (IndexType index = 0; index < ne; ++index) {
    row = elements[2 * index];
    col = elements[2 * index + 1];
    assert(row >= cur_row);
    cur_row = row;
    (void)cur_row;
    pos = US.start(row);
    while ((US.col(pos) != col)) {
      ++pos;
      assert(pos != US.stop(row));
    }
    mat(pos)->vector_get(tmp);
    ShortIndexType ncomp = mat(pos)->ncomp();
    assert(tmp.size() == ncomp * ncomp);

    for (ShortIndexType r = 0; r < ncomp; ++r)
      for (ShortIndexType c = 0; c < ncomp; ++c)
        values.push_back(1.0 * tmp[r * ncomp + c]);

    start[index + 1] = start[index] + tmp.size();
  }
}

// /*-------------------------------------------------------------*/

template<class B>
void
SparseBlockMatrix<B>::FurbishInterface(double d,
                                       const nvector<IndexType>& elements,
                                       const nvector<IndexType>& start,
                                       const nvector<MatrixEntryType>& values)
{
  IndexType ne = elements.size() / 2;

  nvector<MatrixEntryType> tmp;
  IndexType row;
  IndexType pos = -1;
  IndexType col;
  for (IndexType index = 0; index < ne; ++index) {
    row = elements[2 * index];
    col = elements[2 * index + 1];
    pos = US.start(row);
    while (US.col(pos) != col) {
      ++pos;
      if (pos == US.stop(row))
        break;
    }
    if (pos == US.stop(row))
      continue;

    tmp.resize(start[index + 1] - start[index]);
    for (IndexType i = 0; i < tmp.size(); ++i)
      tmp[i] = values[i + start[index]];
    mat(pos)->vector_add(d, tmp);
  }
}

/*-------------------------------------------------------------*/

template<class B>
SparseBlockMatrix<B>&
SparseBlockMatrix<B>::operator=(const SparseBlockMatrix<B>& S)
{
  const ColumnDiagStencil* AS =
    dynamic_cast<const ColumnDiagStencil*>(S.GetStencil());
  assert(AS);

  smat.reserve(S.size());
  smat.resize(S.size());

  US.col().reserve(AS->nentries());
  US.col().resize(AS->nentries());
  US.start().reserve(AS->n() + 1);
  US.start().resize(AS->n() + 1);
  US.diag().reserve(AS->n());
  US.diag().resize(AS->n());

  smat = S.mat();
  US.col() = AS->col();
  US.start() = AS->start();
  US.diag() = AS->diag();

  return *this;
}

/*-------------------------------------------------------------*/

template<class B>
void
SparseBlockMatrix<B>::ReInit(const SparseStructureInterface* SI)
{
  US.memory(SI);

  const SparseStructure* S = dynamic_cast<const SparseStructure*>(SI);
  smat.reserve(S->ntotal());
  smat.resize(S->ntotal());

  assert(S->ntotal() > 0);

  nc = smat[0].ncomp();
}

/*-------------------------------------------------------------*/

template<class B>
void
SparseBlockMatrix<B>::zero()
{
  for (IndexType i = 0; i < smat.size(); i++) {
    smat[i].zero();
  }
}

/*-------------------------------------------------------------*/

template<class B>
void
SparseBlockMatrix<B>::scale_diag(IndexType i,
                                 const std::vector<IndexType>& cv,
                                 double s)
{
  IndexType diag = US.diag(i);
  for (IndexType c = 0; c < cv.size(); ++c) {
    IndexType comp = cv[c];
    assert(comp < nc);
    smat[diag].diag(comp) *= s;
  }
}

/*-------------------------------------------------------------*/

template<class B>
void
SparseBlockMatrix<B>::dirichlet(IndexType i, const std::vector<IndexType>& cv)
{
  for (IndexType pos = US.start(i); pos < US.stop(i); pos++) {
    IndexType j = US.col(pos);
    smat[pos].DirichletRow(cv);
    // das ist N^2 !!!!
    IndexType pos2 = US.Find(j, i);
    smat[pos2].DirichletCol(cv);
  }
  IndexType diag = US.diag(i);
  smat[diag].DirichletDiag(cv);
}

/*-------------------------------------------------------------*/

template<class B>
void
SparseBlockMatrix<B>::dirichlet_only_row(IndexType i,
                                         const std::vector<IndexType>& cv)
{
  for (IndexType pos = US.start(i); pos < US.stop(i); pos++) {
    smat[pos].DirichletRow(cv);
  }
  smat[US.diag(i)].DirichletDiag(cv);
}

/*-------------------------------------------------------------*/

template<class B>
void
SparseBlockMatrix<B>::dirichlet_only_column(IndexType i,
                                            const std::vector<IndexType>& cv)
{
  // very slow... ??
  for (IndexType r = 0; r < US.n(); ++r)
    for (IndexType p = US.start(r); p < US.stop(r); ++p)
      if (US.col(p) == i)
        smat[p].DirichletCol(cv);
}

/*-------------------------------------------------------------*/

template<class B>
void
SparseBlockMatrix<B>::dirichlet_only_row_no_diag(
  IndexType i,
  const std::vector<IndexType>& cv)
{
  for (IndexType pos = US.start(i); pos < US.stop(i); pos++) {
    smat[pos].DirichletRow(cv);
  }
}

/*-------------------------------------------------------------*/

template<class B>
void
SparseBlockMatrix<B>::periodic(
  const std::map<IndexType, IndexType>& m_PeriodicPairs,
  const IntVector& iv_Components)
{
  for (IndexType i = 0; i < iv_Components.size(); i++) {
    IndexType comp = iv_Components[i];
    IndexType first, second;
    std::vector<double> iv_first, iv_second;

    for (std::map<IndexType, IndexType>::const_iterator p_pair =
           m_PeriodicPairs.begin();
         p_pair != m_PeriodicPairs.end();
         p_pair++) {
      first = p_pair->first;
      second = p_pair->second;

      for (IndexType pos = US.start(first); pos < US.stop(first); pos++) {
        IndexType j = US.col(pos);
        for (IndexType pos2 = US.start(second); pos2 < US.stop(second);
             pos2++) {
          if (US.col(pos2) == j) {
            smat[pos].getrow(iv_first, comp);
            smat[pos2].getrow(iv_second, comp);
            for (IndexType k = 0; k < iv_first.size(); k++) {
              iv_first[k] = .5 * (iv_first[k] + iv_second[k]);
              iv_second[k] = iv_first[k];
            }
            smat[pos].setrow(iv_first, comp);
            smat[pos2].setrow(iv_second, comp);
            break;
          }
        }

        if (j != first && j != second) {
          for (IndexType pos3 = US.start(j); pos3 < US.stop(j); pos3++) {
            if (US.col(pos3) == first) {
              for (IndexType pos4 = US.start(j); pos4 < US.stop(j); pos4++)
                if (US.col(pos4) == second) {
                  smat[pos3].getcolumn(iv_first, comp);
                  smat[pos4].getcolumn(iv_second, comp);
                  for (IndexType k = 0; k < iv_first.size(); k++) {
                    iv_first[k] = .5 * (iv_first[k] + iv_second[k]);
                    iv_second[k] = iv_first[k];
                  }
                  smat[pos3].setcolumn(iv_first, comp);
                  smat[pos4].setcolumn(iv_second, comp);
                  break;
                }
              break;
            }
          }
        }
      }

      for (IndexType pos = US.start(first); pos < US.stop(first); pos++) {
        if (US.col(pos) == first) {
          for (IndexType pos2 = US.start(first); pos2 < US.stop(first);
               pos2++) {
            if (US.col(pos2) == second) {
              smat[pos].getcolumn(iv_first, comp);
              smat[pos2].getcolumn(iv_second, comp);
              for (IndexType k = 0; k < iv_first.size(); k++) {
                iv_first[k] = .5 * (iv_first[k] + iv_second[k]);
                iv_second[k] = iv_first[k];
              }
              smat[pos].setcolumn(iv_first, comp);
              smat[pos2].setcolumn(iv_second, comp);

              smat[pos].diag(comp) += smat[pos2].diag(comp);
              smat[pos2].diag(comp) = 0.;
              break;
            }
          }
          break;
        }
      }

      for (IndexType pos = US.start(second); pos < US.stop(second); pos++) {
        if (US.col(pos) == first) {
          for (IndexType pos2 = US.start(second); pos2 < US.stop(second);
               pos2++) {
            if (US.col(pos2) == second) {
              smat[pos].getcolumn(iv_first, comp);
              smat[pos2].getcolumn(iv_second, comp);
              for (IndexType k = 0; k < iv_first.size(); k++) {
                iv_first[k] = .5 * (iv_first[k] + iv_second[k]);
                iv_second[k] = iv_first[k];
              }
              smat[pos].setcolumn(iv_first, comp);
              smat[pos2].setcolumn(iv_second, comp);

              smat[pos2].diag(comp) += smat[pos].diag(comp);
              smat[pos].diag(comp) = 0.;
              break;
            }
          }
          break;
        }
      }
    }
  }
}

/*-------------------------------------------------------------*/

template<class B>
void
SparseBlockMatrix<B>::MatrixResidualSome(const std::vector<IndexType>& indices,
                                         GlobalVector& h,
                                         const GlobalVector& x,
                                         const GlobalVector& y) const
{
  for (auto i : indices) {
    h.equ_node(i, i, y);
    GlobalVector::iterator off = h.start(i);
    const IndexType* cp = &(US.col(US.start(i)));
    for (IndexType pos = US.start(i); pos < US.stop(i); pos++) {
      mat(pos)->cadd(-1., off, x.start(*cp++));
    }
  }
}

template<class B>
void
SparseBlockMatrix<B>::vmult(GlobalVector& y,
                            const GlobalVector& x,
                            double s) const
{
#pragma omp parallel for schedule(static)
  for (IndexType i = 0; i < US.n(); i++) {
    GlobalVector::iterator off = y.start(i);
    const IndexType* cp = &(US.col(US.start(i)));
    for (IndexType pos = US.start(i); pos < US.stop(i); pos++) {
      mat(pos)->cadd(s, off, x.start(*cp++));
    }
  }
}

/*-------------------------------------------------------------*/

template<class B>
void
SparseBlockMatrix<B>::vmult(GlobalVector& y,
                            const GlobalVector& x,
                            const TimePattern& TP,
                            double s) const
{
  assert(US.n() > 0);

  for (IndexType i = 0; i < US.n(); i++) {
    GlobalVector::iterator off = y.start(i);
    for (IndexType pos = US.start(i); pos < US.stop(i); pos++) {
      double m = s * smat[pos](0, 0);
      TP.mult(off, x.start(US.col(pos)), m);
    }
  }
}

/*-------------------------------------------------------------*/

template<class B>
void
SparseBlockMatrix<B>::AddMassWithDifferentStencil(const MatrixInterface* M,
                                                  const TimePattern& TP,
                                                  double s)
{
  //   const SparseBlockMatrix<FMatrixBlock<1> >* MP =
  //     dynamic_cast<const SparseBlockMatrix<FMatrixBlock<1> >*>(M);
  //   assert(MP);
  const SimpleMatrix* MP = dynamic_cast<const SimpleMatrix*>(M);
  assert(MP);
  const ColumnDiagStencil* USM =
    dynamic_cast<const ColumnDiagStencil*>(MP->GetStencil());
  assert(USM);

  for (IndexType i = 0; i < USM->n(); i++) {
    for (IndexType pos = USM->start(i); pos < USM->stop(i); pos++) {
      IndexType j = USM->col(pos);
      // double sm = s * MP->mat(pos)->value(0,0);
      double sm = s * MP->GetValue(pos);

      IndexType mpos = US.Find(i, j);
      smat[mpos].add(sm, TP);
    }
  }
}

/*-------------------------------------------------------------*/

template<class B>
void
SparseBlockMatrix<B>::AddMassWithDifferentStencilJacobi(
  const MatrixInterface* M,
  const TimePattern& TP,
  double s)
{
  const SimpleMatrix* MP = dynamic_cast<const SimpleMatrix*>(M);
  assert(MP);
  const ColumnDiagStencil* USM =
    dynamic_cast<const ColumnDiagStencil*>(MP->GetStencil());
  assert(USM);

  IndexType n = USM->n();
  std::vector<double> diag(n);
  for (IndexType i = 0; i < n; i++) {
    diag[i] = MP->GetValue(i, i);
  }

  for (IndexType i = 0; i < USM->n(); i++) {
    for (IndexType pos = USM->start(i); pos < USM->stop(i); pos++) {
      IndexType j = USM->col(pos);
      double sm = s * MP->GetValue(pos);

      IndexType mpos = US.Find(i, j);
      smat[mpos].add(sm, TP);
      smat[mpos] *= 1 / sqrt(diag[i] * diag[j]);
    }
  }
}

/*-------------------------------------------------------------*/

template<class B>
void
SparseBlockMatrix<B>::transpose()
{
  for (IndexType i = 0; i < US.n(); i++) {
    IndexType diag = US.diag(i);
    smat[diag].transpose();
    for (IndexType pos = diag + 1; pos < US.stop(i); pos++) {
      IndexType j = US.col(pos);
      IndexType tpos = US.Find(j, i);
      smat[pos].transpose(smat[tpos]);
    }
  }
}

/*-------------------------------------------------------------*/

template<class B>
void
SparseBlockMatrix<B>::copy_entries(const MatrixInterface& AI)
{
  const SparseBlockMatrix<B>* AP =
    dynamic_cast<const SparseBlockMatrix<B>*>(&AI);
  assert(AP);

  const SparseBlockMatrix<B>& A = *AP;

  const ColumnDiagStencil* AS =
    dynamic_cast<const ColumnDiagStencil*>(AP->GetStencil());
  assert(AS);

  if (US.nentries() == AS->nentries()) {
    smat = A.mat();
  } else {
    zero();
    for (IndexType i = 0; i < US.n(); i++) {
      for (IndexType posA = AS->start(i); posA < AS->stop(i); posA++) {
        IndexType jA = AS->col(posA);
        for (IndexType pos = US.start(i); pos < US.stop(i); pos++) {
          IndexType j = US.col(pos);
          if (jA == j)
            *mat(pos) += *A.mat(posA);
        }
      }
    }
  }
}

/*-------------------------------------------------------------*/

template<class B>
void
SparseBlockMatrix<B>::entry(nvector<IndexType>::const_iterator start,
                            nvector<IndexType>::const_iterator stop,
                            const EntryMatrix& M,
                            double s)
{
  nvector<IndexType>::const_iterator p, q;
  IndexType ii = 0;
  for (p = start; p != stop; p++) {
    IndexType i = *p;
    IndexType jj = 0;
    for (q = start; q != stop; q++) {
      IndexType j = *q;
      for (IndexType pos = US.start(i); pos < US.stop(i); pos++) {
        if (US.col(pos) == j) {
          mat(pos)->entry(ii, jj, M, s);
          break;
        }
      }
      jj++;
    }
    ii++;
  }
}

/*-------------------------------------------------------------*/

template<class B>
void
SparseBlockMatrix<B>::entry(nvector<IndexType>::const_iterator start1,
                            nvector<IndexType>::const_iterator stop1,
                            nvector<IndexType>::const_iterator start2,
                            nvector<IndexType>::const_iterator stop2,
                            const EntryMatrix& M,
                            double s)
{
  nvector<IndexType>::const_iterator p, q;
  IndexType ii = 0;
  for (p = start1; p != stop1; p++) {
    IndexType i = *p;
    IndexType jj = 0;
    for (q = start2; q != stop2; q++) {
      IndexType j = *q;
      for (IndexType pos = US.start(i); pos < US.stop(i); pos++) {
        if (US.col(pos) == j) {
          mat(pos)->entry(ii, jj, M, s);
          break;
        }
      }
      jj++;
    }
    ii++;
  }
}

/*-------------------------------------------------------------*/

template<class B>
void
SparseBlockMatrix<B>::entrydual(nvector<IndexType>::const_iterator start,
                                nvector<IndexType>::const_iterator stop,
                                const EntryMatrix& M,
                                double s)
{
  nvector<IndexType>::const_iterator p, q;
  IndexType ii = 0;
  for (p = start; p != stop; p++) {
    IndexType i = *p;
    IndexType jj = 0;
    for (q = start; q != stop; q++) {
      IndexType j = *q;
      for (IndexType pos = US.start(i); pos < US.stop(i); pos++) {
        if (US.col(pos) == j) {
          mat(pos)->dual_entry(ii, jj, M, s);
          break;
        }
      }
      jj++;
    }
    ii++;
  }
}

/*-------------------------------------------------------------*/

template<class B>
void
SparseBlockMatrix<B>::entry_diag(IndexType i, const nmatrix<double>& M)
{
  mat(US.diag(i))->entry(M);
}

/*-------------------------------------------------------------*/

template<class B>
std::ostream&
SparseBlockMatrix<B>::Write(std::ostream& os) const
{
  os << n() << "\t" << ntotal() << std::endl << std::endl;
  os << "Diag\n";
  for (IndexType i = 0; i < US.n(); i++) {
    std::cerr
      << "SparseBlockMatrix<B>::Write not implemented for all block-types"
      << std::endl;
    abort();
    //    os << smat[US.diag(i)] << " ";
  }
  os << std::endl << std::endl;
  for (IndexType i = 0; i < US.n(); i++) {
    // const IndexType*    cp = &(US.col(US.start(i)));
    for (IndexType pos = US.start(i); pos < US.stop(i); pos++) {
      std::cerr
        << "SparseBlockMatrix<B>::Write not implemented for all block-types"
        << std::endl;
      abort();
      os << *mat(pos) << " ";
    }
    os << std::endl;
  }
  return os;
}

template<class B>
void
SparseBlockMatrix<B>::write_raw(std::string fname) const
{
  std::ofstream OUT(fname);
  OUT.precision(12);
  assert(OUT.is_open());
  for (IndexType r = 0; r < US.n(); ++r)
    for (IndexType p = US.start(r); p < US.stop(r); ++p) {
      IndexType c = US.col(p);
      for (ShortIndexType rc = 0; rc < mat(p)->ncomp(); ++rc)
        for (ShortIndexType cc = 0; cc < mat(p)->ncomp(); ++cc)
          OUT << r * mat(p)->ncomp() + rc + 1 << "\t" // +1 for matlab
              << c * mat(p)->ncomp() + cc + 1 << "\t"
              << mat(p)->operator()(rc, cc) << std::endl;
    }
  OUT.close();
}

} // namespace Gascoigne
